/*
 * Copyright (c) 2008-2016 Haulmont. All rights reserved.
 * Use is subject to license terms, see http://www.cuba-platform.com/commercial-software-license for details.
 */

buildscript {
    ext.cubaVersion = '6.9-SNAPSHOT'
    ext.cubaVersion = rootProject.hasProperty('buildVersion') ? rootProject['buildVersion'] : cubaVersion
    
    println("CUBA Platform - Workflow Version ${ext.cubaVersion}")
    println("")
    
    repositories {
        mavenLocal()
        maven {
            credentials {
                username System.getenv('HAULMONT_REPOSITORY_USER')
                password System.getenv('HAULMONT_REPOSITORY_PASSWORD')
            }
            url "http://repository.haulmont.com:8587/nexus/content/groups/work"
        }
    }
    dependencies {
        classpath group: 'com.haulmont.gradle', name: 'cuba-plugin', version: cubaVersion
    }
}

configurations {
    bom
}
dependencies {
    bom("com.haulmont.cuba:cuba-global:$cubaVersion")
}

apply(plugin: 'idea')
apply(plugin: 'cuba')

bom.load file('modules/global/src/com/haulmont/workflow/bom.properties')

cuba {
    artifact {
        group = 'com.haulmont.workflow'
        version = project.cubaVersion.replace('-SNAPSHOT', '')
        isSnapshot = project.cubaVersion.endsWith('-SNAPSHOT')
    }

    ide {
        vcs = 'Git'
        copyright = '''Copyright (c) 2008-$today.year Haulmont. All rights reserved.
Use is subject to license terms, see http://www.cuba-platform.com/commercial-software-license for details.'''
    }
}

def sharedLibModule = project(':workflow-shared-lib')
def globalModule = project(':workflow-global')
def coreModule = project(':workflow-core')
def guiModule = project(':workflow-gui')
def webModule = project(':workflow-web')

def hibernate = [group: 'org.hibernate', name: 'hibernate-core',
                 version: bom.getVersion('org.hibernate', 'hibernate-core'), transitive: false]

def baseVersion = cuba.artifact.version + (cuba.artifact.isSnapshot ? '-SNAPSHOT' : '')

configure([sharedLibModule, globalModule, coreModule, guiModule, webModule]) {
    apply(plugin: 'java')
    apply(plugin: 'idea')
    apply(plugin: 'maven')
    apply(plugin: 'cuba')
    apply(plugin: 'groovy')

    sourceSets {
        main {
            groovy { srcDir 'src' }
        }
        test {
            groovy { srcDir 'test' }
        }
    }

    dependencies {
        compile(bom['org.codehaus.groovy:groovy-all'])

        compile(group: 'com.haulmont.cuba', name: 'cuba-global', version: baseVersion)
        testCompile(bom['junit:junit'])
    }

    task sourceJar(type: Jar) {
        from file('src')
        classifier = 'sources'
    } 

    artifacts {
        archives sourceJar
    }

    jar {
        manifest {
            attributes("Implementation-Version": cubaVersion)
        }
    }
}

configure(sharedLibModule) {
    dependencies {
        compile(hibernate)
        compile(bom['commons-collections:commons-collections'])
        compile(bom['org.springframework:spring-tx'])
        compile(bom['org.springframework:spring-jdbc'])
        compile(bom['org.springframework:spring-orm'])
    }
}

configure(globalModule) {
    task enhance(type: CubaEnhancing)

    jar {
        manifest {
            attributes('App-Component-Id': cuba.artifact.group)
            attributes('App-Component-Version': cubaVersion)
        }
    }
}

configure(coreModule) {
    configurations {
        jdbc
        dbscripts
    }

    dependencies {
        compile(globalModule)
        compile(sharedLibModule)
        compile(group: 'com.haulmont.cuba', name: 'cuba-core', version: baseVersion)
        testCompile(group: 'com.haulmont.cuba', name: 'cuba-core-tests', version: baseVersion)

        compile(bom['org.ocpsoft.prettytime:prettytime-nlp'])
        compile(bom['com.haulmont.thirdparty:jbpm'])
        compile(bom['org.json:json'])
        runtime(bom['org.glassfish.web:javax.el'])
        compile(hibernate)
        compile(bom['commons-collections:commons-collections'])
        runtime(bom['org.javassist:javassist'])
        provided(bom['org.apache.tomcat:tomcat-servlet-api'])
        jdbc(bom['org.hsqldb:hsqldb'])
        dbscripts(group: 'com.haulmont.cuba', name: 'cuba-core', version: baseVersion, classifier: 'db', ext: 'zip')
    }

    dbScriptsArchive {
        exclude '10-cuba/**'
    }

    assembleDbScripts { moduleAlias = '20-workflow' }

    def hsqlDbName = 'cubadb'

    task startDb(description: 'Starts local HSQLDB server', type: CubaHsqlStart) {
        dbName = hsqlDbName
    }

    task stopDb(description: 'Stops local HSQLDB server', type: CubaHsqlStop)  {
        dbName = hsqlDbName
    }

    task killDb(description: 'Kill local HSQLDB server process running on port 9001', type: CubaKillProcess) {
        port = 9001
    }

    task removeDb(description: 'Removes local HSQL database', type: Delete) {
        delete new File("$rootProject.projectDir/data")
    }

    task createDb(dependsOn: assemble, description: 'Creates local HSQL database', type: CubaDbCreation) {
        dbms = 'hsql'
        dbName = hsqlDbName
        dbUser = 'sa'
        dbPassword = ''
    }
}

configure(guiModule) {
    dependencies {
        compile(globalModule)
        compile(group: 'com.haulmont.cuba', name: 'cuba-gui', version: baseVersion)
    }
}

configure(webModule) {
    configurations {
        yui
    }

    dependencies {
        compile(sharedLibModule)
        compile(globalModule)
        compile(guiModule)
        compile(group: 'com.haulmont.cuba', name: 'cuba-web', version: baseVersion)
        compile(bom['org.json:json'])

        provided(bom['org.apache.tomcat:tomcat-servlet-api'])

        yui(bom['com.haulmont.thirdparty:yui'])
    }

    task setupYui(description: 'Sets up YUI library') {
        doLast {
            configurations.yui.files.each { dep ->
                copy {
                    from zipTree(dep.absolutePath)
                    into new File(webModule.projectDir, 'web/wfdesigner/lib/yui')
                }
            }
        }
    }

    task webArchive(dependsOn: setupYui, type: Zip) {
        from file('web')
        classifier = 'web'
    }

    artifacts {
        archives webArchive
    }
}