/*
 * Copyright (c) 2013 Haulmont Technology Ltd. All Rights Reserved.
 * Haulmont Technology proprietary and confidential.
 * Use is subject to license terms.
 */

buildscript {
    ext.cubaVersion = '6.1-SNAPSHOT'
    ext.cubaVersion = rootProject.hasProperty('buildVersion') ? rootProject['buildVersion'] : cubaVersion
    
    println("CUBA Platform - Workflow Version ${ext.cubaVersion}")
    println("")
    
    repositories {
        mavenLocal()
        maven {
            credentials {
                username System.getenv('HAULMONT_REPOSITORY_USER')
                password System.getenv('HAULMONT_REPOSITORY_PASSWORD')
            }
            url "http://repository.haulmont.com:8587/nexus/content/groups/work"
        }
    }
    dependencies {
        classpath group: 'com.haulmont.gradle', name: 'cuba-plugin', version: cubaVersion
    }
}

apply(plugin: 'idea')
apply(plugin: 'cuba')

cuba {
    artifact {
        group = 'com.haulmont.workflow'
        version = project.cubaVersion.replace('-SNAPSHOT', '')
        isSnapshot = project.cubaVersion.endsWith('-SNAPSHOT')
    }

    ide {
        vcs = 'Git'
    }
}

def sharedLibModule = project(':workflow-shared-lib')
def globalModule = project(':workflow-global')
def coreModule = project(':workflow-core')
def guiModule = project(':workflow-gui')
def webModule = project(':workflow-web')

def servletApi = 'org.apache.tomcat:tomcat-servlet-api:8.0.26'
def json = [group: 'org.json', name: 'json', version: '20090211']
def hibernate = [group: 'org.hibernate', name: 'hibernate-core', version: '3.3.1.GA', transitive: false];
def hsqldb = 'org.hsqldb:hsqldb:2.3.3'

def baseVersion = cuba.artifact.version + (cuba.artifact.isSnapshot ? '-SNAPSHOT' : '')

configure([sharedLibModule, globalModule, coreModule, guiModule, webModule]) {
    apply(plugin: 'java')
    apply(plugin: 'idea')
    apply(plugin: 'maven')
    apply(plugin: 'checkstyle')
    apply(plugin: 'cuba')
    apply(plugin: 'groovy')

    sourceSets {
        main {
            groovy { srcDir 'src' }
        }
        test {
            groovy { srcDir 'test' }
        }
    }

    dependencies {
        compile(group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.4.4')

        compile(group: 'com.haulmont.cuba', name: 'cuba-global', version: baseVersion)
        testCompile('junit:junit:4.12')
    }

    task sourceJar(type: Jar) {
        from file('src')
        classifier = 'sources'
    } 

    artifacts {
        archives sourceJar
    }

    String checkstyleConfigDir = "${rootProject.projectDir}/config/checkstyle"
    checkstyle {
        configFile = new File("${checkstyleConfigDir}/checkstyle.xml".toString())
        configProperties = [
                'checkstyleConfigDir' : checkstyleConfigDir
        ]
        reportsDir = new File("${buildDir}/checkstyle".toString())
    }

    checkstyleMain << {
        def checkstyleDir = "${project.buildDir}/checkstyle".toString()
        ant.xslt('in': "$checkstyleDir/main.xml",
                out: "$checkstyleDir/$project.name-checkstyle.html",
                style: "$checkstyleConfigDir/checkstyle.xsl")
    }

    jar {
        manifest {
            attributes("Implementation-Version": cubaVersion)
        }
    }
}

configure(sharedLibModule) {
    dependencies {
        compile(hibernate)
        compile(group: 'org.springframework', name: 'spring-tx', version: '4.2.0.RELEASE')
        compile(group: 'org.springframework', name: 'spring-jdbc', version: '4.2.0.RELEASE')
        compile(group: 'org.springframework', name: 'spring-orm', version: '4.2.0.RELEASE')
    }
}

configure(globalModule) {
    task enhance(type: CubaEnhancing)
}

configure(coreModule) {
    configurations {
        jdbc
        dbscripts
    }

    dependencies {
        compile(globalModule)
        compile(sharedLibModule)
        compile(group: 'com.haulmont.cuba', name: 'cuba-core', version: baseVersion)
        testCompile(group: 'com.haulmont.cuba', name: 'cuba-core-tests', version: baseVersion)
        compile(group: 'com.haulmont.thirdparty', name: 'jbpm', version: '4.4.20130109')
        compile(json)
        runtime(group: 'de.odysseus.juel', name: 'juel', version: '2.1.0')
        compile('org.ocpsoft.prettytime:prettytime-nlp:4.0.0.Final')
        compile(hibernate)
        runtime('org.javassist:javassist:3.20.0-GA')
        provided(servletApi)
        jdbc(hsqldb)
        dbscripts(group: 'com.haulmont.cuba', name: 'cuba-core', version: baseVersion, classifier: 'db', ext: 'zip')
    }

    dbScriptsArchive {
        exclude '10-cuba/**'
    }

    assembleDbScripts { moduleAlias = '20-workflow' }

    def hsqlDbName = 'cubadb'

    task startDb(description: 'Starts local HSQLDB server', type: CubaHsqlStart) {
        dbName = hsqlDbName
    }

    task stopDb(description: 'Stops local HSQLDB server', type: CubaHsqlStop)  {
        dbName = hsqlDbName
    }

    task killDb(description: 'Kill local HSQLDB server process running on port 9001', type: CubaKillProcess) {
        port = 9001
    }

    task removeDb(description: 'Removes local HSQL database', type: Delete) {
        delete new File("$rootProject.projectDir/data")
    }

    task createDb(dependsOn: assemble, description: 'Creates local HSQL database', type: CubaDbCreation) {
        dbms = 'hsql'
        dbName = hsqlDbName
        dbUser = 'sa'
        dbPassword = ''
    }
}

configure(guiModule) {
    dependencies {
        compile(globalModule)
        compile(group: 'com.haulmont.cuba', name: 'cuba-gui', version: baseVersion)
    }
}

configure(webModule) {
    configurations {
        yui
    }

    dependencies {
        compile(sharedLibModule)
        compile(globalModule)
        compile(guiModule)
        compile(group: 'com.haulmont.cuba', name: 'cuba-web', version: baseVersion)
        compile(json)

        provided(servletApi)

        yui(group: 'com.haulmont.thirdparty', name: 'yui', version: '2.8.1')
    }

    task setupYui(description: 'Sets up YUI library') << {
        configurations.yui.files.each { dep ->
            copy {
                from zipTree(dep.absolutePath)
                into new File(webModule.projectDir, 'web/wfdesigner/lib/yui')
            }
        }
    }
}